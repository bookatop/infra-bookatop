/* Introduces steps to build and test the be-bookatop on dev */

//import com.bookatop.deployment.DeployUtils
//import com.bookatop.deployment.Logger
import com.bookatop.deployment.DeployBuild

def static branches() {
    /*
    def getTags = ("git ls-remote -t -h git@github.com:bookatop/be-bookatop.git").execute()
    return getTags.text.readLines().collect {
        it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')
    }
    */
    return ['main']
}

pipeline {
    agent any

    parameters {
        choice(
                name: 'branchNameParam',
                choices: branches(),
                description: 'Choose branch name*'
        )
        validatingString(
                name: 'serviceNameParam',
                defaultValue: 'auth',
                description: 'Put the service name*',
                failedValidationMessage: 'Service name is empty',
                regex: /^.+$/
        )
        validatingString(
                name: 'buildNumberParam',
                defaultValue: '1',
                description: 'Put the build number*',
                failedValidationMessage: 'Build number is invalid',
                regex: /^[0-9]+$/
        )
    }

    stages {
        stage('Deploy on DEV') {
            steps {
                script {

                    GString servicePlace = "${branchNameParam}:${serviceNameParam}-service:${buildNumberParam} on $ENVIRONMENT"

                    echo "Deploy $servicePlace"

                    GString backendUrl = "${env.BACKEND_URL}"
                    GString sourceFile = "${env.SOUR_PATH}/${branchNameParam}/${serviceNameParam}-service-${buildNumberParam}.jar"
                    GString destFile = "${env.DEST_PATH}/${serviceNameParam}-service.jar"
                    GString serviceName = "${serviceNameParam}.service"
                    GString daemonName = "${serviceNameParam}.service"
                    Closure errorClosure = { error it }
                    Closure loggerClosure = { echo it }

                    DeployBuild deployBuild = new DeployBuild(
                            backendUrl,
                            sourceFile,
                            destFile,
                            serviceName,
                            daemonName
                    )

                    deployBuild.deploy(loggerClosure, errorClosure)

//                    Logger logger = new Logger()
//                    try {
//
//                        DeployUtils utils = new DeployUtils(logger)
//
//                        GString sourceFile = "${env.SOUR_PATH}/${branchNameParam}/${serviceNameParam}-service-${buildNumberParam}.jar"
//                        GString destFile = "${env.DEST_PATH}/${serviceNameParam}-service.jar"
//                        Closure errorClosure = { error it.toString() }
//                        GString serviceName = "${serviceNameParam}.service"
//                        GString daemonName = "${serviceNameParam}.service"
//
//                        utils.fileExists sourceFile, errorClosure
//                        utils.stopService serviceName, "${env.BACKEND_URL}", errorClosure
//                        utils.statusService serviceName, "${env.BACKEND_URL}", 000, errorClosure
//                        utils.stopDaemon daemonName, errorClosure
//                        utils.statusDaemon daemonName, "failed", {
//                            utils.statusDaemon daemonName, "inactive", errorClosure
//                        }
//                        utils.replaceService sourceFile, destFile, errorClosure
//                        utils.fileExists destFile, errorClosure
//                        utils.launchDaemon daemonName, errorClosure
//                        utils.statusDaemon daemonName, "active", errorClosure
//                        utils.statusService serviceName, "${env.BACKEND_URL}", 200, errorClosure
//
//                    } finally {
//                        echo logger.toString()
//                    }

                    echo "The $servicePlace is success deployed"
                }
            }
        }
    }
}