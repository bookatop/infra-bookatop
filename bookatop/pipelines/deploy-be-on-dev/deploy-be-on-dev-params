/* Introduces steps to build and test the be-bookatop on dev */

import com.bookatop.povider.DeployBackEndStageProvider

def static branches() {
    /*
    def getTags = ("git ls-remote -t -h git@github.com:bookatop/be-bookatop.git").execute()
    return getTags.text.readLines().collect {
        it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')
    }
    */
    return ['main']
}

pipeline {
    agent any

    parameters {
        choice(
                name: 'branchNameParam',
                choices: branches(),
                description: 'Choose branch name*'
        )
        validatingString(
                name: 'serviceNameParam',
                defaultValue: 'auth',
                description: 'Put the service name*',
                failedValidationMessage: 'Service name is empty',
                regex: /^.+$/
        )
        validatingString(
                name: 'buildNumberParam',
                defaultValue: '1',
                description: 'Put the build number*',
                failedValidationMessage: 'Build number is invalid',
                regex: /^[0-9]+$/
        )
    }

    stages {
        stage('Deploy on DEV') {
            steps {
                script {
                    echo "${branchNameParam}:${serviceNameParam}-service:${buildNumberParam} on $ENVIRONMENT"

                    GString url = "${env.BACKEND_URL}"
                    GString source = "${env.SOUR_PATH}/${branchNameParam}/${serviceNameParam}-service-${buildNumberParam}.jar"
                    GString dest = "${env.DEST_PATH}/${serviceNameParam}-service.jar"
                    GString service = "${serviceNameParam}.service"
                    GString daemon = "${serviceNameParam}.service"

                    logger = { echo it }
                    error = { error it }

                    new DeployBackEndStageProvider(
                            url,
                            source,
                            dest,
                            service,
                            daemon
                    ).deploy(logger, error)
                }
            }
        }
    }
}