properties([
        parameters([
                [
                        $class    : 'ChoiceParameter',
                        choiceType: 'PT_SINGLE_SELECT',
                        name      : 'releaseBranch',
                        script    : [
                                $class: 'GroovyScript',
                                script: [classpath: [], sandabox: false,
                                     script   : """
                                         def list = []
                                         return list
                                    """
                                ]
                        ]
                ]
        ])
])

//[
//        $class              : 'ChoiceParameter',
//        choiceType          : 'PT_SINGLE_SELECT',
//        name                : 'releaseName',
//        referencedParameters: 'releaseBranch',
//        script              : [
//                $class: 'GroovyScript',
//                script: "return['dev','stage','prod']"
//        ]
//],
//[
//        $class              : 'StringParameterDefinition',
//        choiceType          : 'PT_TEXTBOX',
//        name                : 'releaseNumber',
//        referencedParameters: 'releaseBranch',
//        script              : [
//                $class: 'GroovyScript',
//                script: ""
//        ]
//]

static String branchesPath() {
    '/var/lib/jenkins/jobs/build-backend-on-dev/branches'
}

def static branches() {
    def branches = ("ls ${branchesPath()}").execute()
    branches.text.readLines()
}

def static releases(String branch) {
    def releases = ("ls ${branchesPath()}/\${branch}/builds/${lastRelease(branch)}/release").execute()
    releases.text.readLines().collect {
        it.replace('-service.jar', '')
    }
}

def static lastRelease(String branch) {
    def builds = ("ls ${branchesPath()}/\${branch}/builds").execute()
    builds.text.readLines().findAll() {
        it.isNumber()
    }.max()
}

pipeline {
    agent any

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    }

//    parameters {
//        choice(
//                name: 'releaseBranch',
//                choices: branches(),
//                description: 'Choose branch name*'
//        )
//        choice(
//                name: 'releaseName',
//                choices: releases(${releaseBranch}),
//                description: 'Choose release name*'
//        )
//        validatingString(
//                name: 'releaseNumber',
//                defaultValue: lastRelease(${releaseBranch}),
//                description: 'Put the build number*',
//                failedValidationMessage: 'Build number is invalid',
//                regex: /^[0-9]+$/
//        )
//    }

    stages {
        stage('Build on DEV') {
            steps {
                script {
                    String jenkinsHome = '/var/lib/jenkins'

                    GString sourceRelease = "${jenkinsHome}/jobs/build-backend-on-dev/branches/${releaseBranch}/builds/${releaseNumber}/release/${releaseName}-service.jar"
                    GString destRelease = "/path/dev-env/be-bookatop/deploy/${releaseName}-service.jar"

                    String file = 'deploy-backend-on-dev.sh'
                    String script = libraryResource "com/bookatop/scripts/${file}"

                    writeFile(file: file, text: script)
                    sh "chmod +x ./${file}"
                    sh "./${file} ${sourceRelease} ${destRelease} ${releaseName}"
                }
            }
        }
    }
}