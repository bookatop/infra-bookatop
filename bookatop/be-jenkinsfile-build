/* Introduces steps to build and test the be-bookatop on dev environment */

def static branches() {
    def getTags = ("git ls-remote -t -h git@github.com:bookatop/be-bookatop.git").execute()
    return getTags.text.readLines().collect {
        it.split()[1].replaceAll('refs/heads/', '').replaceAll('refs/tags/', '').replaceAll("\\^\\{\\}", '')
    }
}

pipeline {
    agent any

    parameters  {
        choice(
            name: 'branchName',
            choices: branches(),
            description: 'Choose branch name*'
        )
        validatingString(
            name: 'serviceName',
            defaultValue: 'auth',
            description: 'Put the service name*',
            failedValidationMessage: 'Service name is empty',
            regex: /^.+$/
        )
        validatingString(
            name: 'buildName',
            defaultValue: '1',
            description: 'Put the build number*',
            failedValidationMessage: 'Build number is invalid',
            regex: /^[0-9]+$/
        )
    }

    stages {
        stage('Deploy') {
            environment {
                BACKEND_URL = "http://localhost:8081"
                SOUR_PATH = "/path/dev-env/be-bookatop/releases/${branchName}"
                DEST_PATH = "/path/dev-env/be-bookatop/releases/libs"
                TRY_STOP_SERVICE = 3
                TRY_START_SERVICE = 3
                TRY_STOP_DAEMON = 3
                TRY_START_DAEMON = 3
                TRY_CHECK_SERVICE = 3
            }
            steps {
                echo "Deploy ${branchName}:${serviceName}-service:${buildName} on $SPACE_NAME"

                script {
                    varSourceJarName = "${serviceName}-service.jar"

                    varSourceJarFile = "${SOUR_PATH}/${serviceName}-service-${buildName}.jar"
                    varDestJarFile = "${DEST_PATH}/${varSourceJarName}"

                    varServiceName="${serviceName}.service"
                    varDaemonName="${serviceName}.service"

                    /*-------------Check if new service exists to be replaced--------------*/
/*
                    sh """
                      #!/bin/sh
                      echo Check new service $varSourceJarFile is exist

                      if ! [ -f $varSourceJarFile ]; then
                         echo Oops! The service $varSourceJarFile is not exist!
                         exit 1
                      fi                       
                    """
*/
                    /*-------------Stop service script-----------------*/
/*
                    sh """
                      #!/bin/sh         
                      echo Stop service $varServiceName

                      i=0
                      while [ \$(curl -X GET '${BACKEND_URL}/actuator/health' | jq -r '.status') = "UP" ] 
                      do                        
                        if [ \$i -eq $TRY_STOP_SERVICE ]; 
                        then
                          echo Oops! Could not stop service $varServiceName after $TRY_STOP_SERVICE tries!
                          exit 1
                        fi
                        curl -X POST '${BACKEND_URL}/actuator/shutdown'
                        sleep 1  
                        i=\$((\$i+1))                          
                      done
                    """
*/
                    /*-------------Stop daemon-----------------*/
/*
                    sh """
                      #!/bin/sh
                      echo Stop daemon $varDaemonName
                      
                      i=0
                      #Continue execution when exit result is non-zero
                      set +e  
                      while [ \$(sudo systemctl is-active $varDaemonName) -eq "active" ]
                      do
                        if [ \$i -eq $TRY_STOP_DAEMON ]; 
                        then 
                          echo Oops! Could not stop daemon $varDaemonName after $TRY_STOP_DAEMON tries!
                          set -e
                          exit 1
                        fi                      
                        sudo systemctl stop $varDaemonName
                        sleep 1
                        i=\$((\$i+1))                      
                      done
                      set -e
                    """
*/
                    /*-------------Replace service----------------------*/
/*
                    sh """
                      #!/bin/sh
                      echo Replace service $varDestJarFile
                      
                      if ! [ -d $DEST_PATH ]; then
                          mkdir -p $DEST_PATH
                      fi              
                      rm -f $DEST_PATH/$varSourceJarName
                      cp -n $varSourceJarFile $varDestJarFile                      
                    """
*/
                    /*-------------Launch daemon----------------------*/
/*
                    sh """
                      #!/bin/sh
                      echo Launch daemon $varDaemonName

                      i=0
                      set +e
                      while [ \$(sudo systemctl is-active $varDaemonName) != "active" ]
                      do
                        if [ \$i -eq $TRY_START_DAEMON ]; 
                        then 
                          set -e
                          echo Oops! Could not start daemon $varDaemonName after $TRY_START_DAEMON tries!
                          exit 1  
                        fi
                        sudo systemctl start $varDaemonName
                        sleep 1
                        \$i=\$((\$i+1))                        
                      done 
                      set -e                                            
                    """
*/
                    /*-----------Check service status----------*/
/*
                    sh """
                      #!/bin/sh
                      echo Check service $varServiceName status
                      
                      i=0
                      while [ \$(curl -X GET '${BACKEND_URL}/actuator/health' | jq -r '.status') != "UP" ] 
                      do                        
                        if [ \$i -eq $TRY_CHECK_SERVICE ]; 
                        then
                          echo Oops! Could not start service $varServiceName after $TRY_CHECK_SERVICE tries!
                          exit 1
                        fi
                        sleep 1  
                        i=\$((\$i+1))                          
                      done  
                    """
*/
                    /*-----------Service is success launched----------*/

                    sh """
                      #!/bin/sh
                      echo "${branchName}:${serviceName}-service:${buildName} is success installed and launched on $SPACE_NAME"                      
                    """
                }
            }
        }
    }
}